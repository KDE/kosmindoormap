/*
    SPDX-FileCopyrightText: 2024 Volker Krause <vkrause@kde.org>
    SPDX-License-Identifier: LGPL-2.0-or-later
*/

/** Navigation mesh filter
 *  The following properties are considered:
 *  - fill-opacity: anything > 0 will emit a walkable area
 *  - extrude: anything > 0 will emit a wall
 *  - width: will emit a walkable area for ways
 *  - classes are used for area types
 *
 *  Supported layer selectors:
 *  - ::link: emits off-mesh bidirectional links for ways and vertically for areas
 *  - ::link_forward, ::link_backward: emits off-mesh directional links for ways
 *
 *  NOTE: zoom is not set for this
 */

area[indoor=area],
area[indoor=corridor],
area[indoor=room],
area[indoor=yes][room],
area[indoor=yes][building:part=elevator],
area[highway=elevator],
area[highway=footway],
area[area:highway=footway],
area[highway=pedestrian],
area[railway=platform],
area[stairwell=stair_landing]
{
    fill-opacity: 1.0;
}

area[indoor=room],
line[indoor=wall],
line[barrier][barrier!=turnstile]
{
    extrude: 1.0;
}

// areas we don't want to cross if possible'
area[indoor=room][!room],
area[indoor=room][room!=entrance][room!=hall],
area[indoor=yes][room][room!=entrance][room!=hall] {
    set .room;
}

// workaround for missing elevator doors
area[indoor=room][highway=elevator]
{
    extrude: 0.0;
}

line[highway=footway][!conveying],
line[highway=footway][conveying=no],
line[highway=steps][!conveying],
line[highway=steps][conveying=no]
{
    width: 2m; // TODO seem too narrow?
}

line[highway=footway][width][!conveying],
line[highway=footway][width][conveying=no],
line[highway=steps][width][!conveying],
line[highway=steps][width][conveying=no]
{
    width: width;
}

line[highway=steps][!conveying],
line[highway=steps][conveying=no]
{
    set .stairs;
}

line[highway=footway][conveying=yes]::link,
line[highway=footway][conveying=reversible]::link
{
    width: 1;
    set .movingWalkway;
}
line[highway=steps][conveying=yes]::link,
line[highway=steps][conveying=reversible]::link
{
    width: 1;
    set .escalator;
}

line[highway=footway][conveying=forward]::link_forward
{
    width: 1;
    set .movingWalkway;
}
line[highway=steps][conveying=forward]::link_forward
{
    width: 1;
    set .escalator;
}

line[highway=footway][conveying=backward]::link_backward
{
    width: 1;
    set .movingWalkway;
}
line[highway=steps][conveying=backward]::link_backward
{
    width: 1;
    set .escalator;
}

line[highway=steps][mx:realtime_status=0]::link,
line[highway=footway][mx:realtime_status=0]::link,
line[highway=steps][mx:realtime_status=0]::link_forward,
line[highway=footway][mx:realtime_status=0]::link_forward,
line[highway=steps][mx:realtime_status=0]::link_backward,
line[highway=footway][mx:realtime_status=0]::link_backward
{
    width: 0;
}

area[indoor=area][stairs=yes]::link,
area[indoor=room][stairs=yes]::link
{
    fill-opacity: 1.0;
    set .stairs;
}

area[highway=elevator]::link,
area[building:part=elevator]::link
{
    fill-opacity: 1.0;
    set .elevator;
}

area[highway=elevator][mx:realtime_status=0]::link,
area[building:part=elevator][mx:realtime_status=0]::link
{
    fill-opacity: 0.0;
}

// possible obstacles on walkable areas
// if this is put on top of a walkable area setting fill-opacity to 0.0
// this wont remove the area, so put a wall around it instead.
area[tourism=artwork] {
    extrude: 1.0;
}

// doors
node[door],
node[entrance=yes],
node[entrance=main] {
    opacity: 1.0;
    width: 1.0m;
}

node[door][width] {
    width: width;
}

node [door][entrance=emergency],
node [door][exit=emergency] {
    opacity: 0.0;
}

// remove things with restricted access
area[access=no],
area[access=private],
area[access=no]::link,
area[access=private]::link
{
    fill-opacity: 0.0;
}

line[access=no],
line[access=private]
{
    width: 0;
}

node[access=no],
node[access=private] {
    opacity: 0;
}
